calendr="2022/06/01"
as.Date(calendr, "%y/%m/%d")
View(calendr)

#ano/mes/dia
Tocalendar=function(calendr){ #tranformar data juliana em data(dd/mm/aaaa)
  calendr=as.Date(calendr, origin="1900/01/01")
}

#ano/mes/dia
Tojulian=function(calendr){ #transformar data em data juliana
  calendr=julian.Date(calendr,origin=as.Date("1900-01-01"))
}


#criacao do vetor de fluxos
nfluxos=5 #numero de fluxos
fluxo=matrix(nrow=nfluxos,ncol=2)#[tempo,valor]tempo em data juliana
colnames(fluxo) <- c("Vencimento data juliana", "Valor")

#criacao do vetor de vertices
nvertices=5 #numero de vertices
vertices=matrix(nrow=nvertices,ncol=2) #[tempo,valor]
colnames(vertices) <- c("Data juliana", "Valor")

#vetor teste para fluxo
fluxo[,1]=c(44500,44100,3000,46000,45500)
fluxo[,2]=c(1,2,3,4,5)

#preencher os vertices
vertices[,1]=c(44710,45075,45440,45805,46170) #inserir as datas
vertices[,2]=0

library(Rfast)
#vetor auxiliar para armazenar as "distancias" entre as datas de 
#vencimento dos fluxos e dos vertices
aux=vector(length=nvertices)
for(j in 1:nfluxos){
  for(i in 1:nvertices){
    aux[j]=as.numeric(abs(fluxo[j,1]-vertices[i,1]))
#indices dos 2 menores valores no vetor auxiliar(a,b)
    b=Rfast::nth(as.numeric(aux), 2, descending = F,na.rm=T,index.return=T)
    a=Rfast::nth(as.numeric(aux), 1, descending = F,na.rm=T,index.return=T)
    c=abs(vertices[a,1]-vertices[b,1])
    
    vertices[b,2]=(abs(fluxo[j,1]-vertices[a,1])/c)*fluxo[b,2]
    vertices[a,2]=(abs(fluxo[j,1]-vertices[b,1])/c)*fluxo[a,2]
  }
}

PV=function(value,periods,rate){
  value=value*(1/(1+rate)^periods)
  return(value)
}

PVn=function(value,periods,rate,npayments)
  value=value*(1/(1+rate)^(npayments/252))
#base ndays in a year = 252
