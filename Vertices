calendr="2022/06/01"
as.Date(calendr, "%y/%m/%d")
View(calendr)

#ano/mes/dia
Tocalendar=function(calendr){ #tranformar data juliana em data(dd/mm/aaaa)
  calendr=as.Date(calendr, origin="1900/01/01")
}

#ano/mes/dia
Tojulian=function(calendr){ #transformar data em data juliana
  calendr=julian.Date(calendr,origin=as.Date("1900-01-01"))
}


#criacao do vetor de fluxos
nfluxos=5 #numero de fluxos
fluxo=matrix(nrow=nfluxos,ncol=2)#[tempo,valor]tempo em data juliana
colnames(fluxo) <- c("Vencimento data juliana", "Valor")

#criacao do vetor de vertices
nvertices=5 #numero de vertices
vertices=matrix(nrow=nvertices,ncol=2) #[tempo,valor]
colnames(vertices) <- c("Data juliana", "Valor")

#vetor teste para fluxo
fluxo[,1]=c(44500,44100,3000,46000,45500)
fluxo[,2]=c(1,2,3,4,5)

#preencher os vertices
vertices[,1]=c(44710,45075,45440,45805,46170) #inserir as datas
vertices[,2]=0

#funcao para alocar os valores dos fluxos nos vertices
#compara a primeira coluna com as datas e aloca os valores da segunda
#coluna com os valores
#necessario converter em data juliana todos periodos
fluxovertice=function(nfluxos,fluxo){
  dist0=which.min(abs(vertices[,1]-fluxo[i,1]))
  for(i in 1:nfluxos){
    vertices[dist0,2]=vertices[dist0,2]+fluxo[i,2]
  }
}
#ajustar para distribuir baseado na diferenca da distancia
dist1=abs((dist0+1)-(dist0,2)) 
dist2=abs((dist0+1)-(dist0,2))
  if (dist1>dist2){
    vertices[dist0,2]=vertices[dist0,2]+fluxo[i,2]*dist2/dist0
    vertices[dist0-1,2]=vertices[dist0,2]+fluxo[i,2]*(dist0-dist2)/dist0
  }
  else if(dist2>dist1){
    vertices[dist0,2]=vertices[dist0,2]+fluxo[i,2]*dist1/dist0
    vertices[dist0+1,2]=vertices[dist0,2]+fluxo[i,2]*(dist0-dist1)/dist0
  }
  else if()
  
  #VP=MTM=VF/(1+taxa)
#criar funcao para gerar uma funcao com assintota

taxajuros=0.11
#tempo=c(1,2,3,4,5)
valor=100
a=-3 #valor
b=20
c=3
tau=40 #50 a 100
vp=vector(length = 100)
for(i in 1:100){
  vp[i]=c(a+b*(1-exp(-i/tau))/(i/tau)+c*exp(-i/tau))
  #vp[i]=c(valor*(1+taxajuros)^i)
}
plot(vp)
a -6 a 12
a=12
m=100
for(i in 1:1000){
  vp[i]=c(1-(1-a)*(1-exp(-i))/(i-a*exp(-i)))
}
plot(vp)
#weibull
ln exp
