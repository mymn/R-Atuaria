#unificar fluxos de caixa em vetores menores(vertices)
#comparacao e alocar fluxos no intervalo mais proximo
#usar datas julianas(01/01/1900)

library(epitools)
library(chron)
library(timeDate)
calendr="01/06/2022"
as.Date(calendr, "%d/%m/%y")
View(calendr)

Tocalendar=function(calendr){ #tranformar data juliana em data(dd/mm/aaaa)
  calendr=as.Date(calendr, origin="1900/01/01")
}

Tojulian=function(calendr){ #transformar data em data juliana
  calendr=julian.Date(calendr,origin=as.Date("1900-01-01"))
}


#criacao do vetor de fluxos
nfluxos=5 #numero de fluxos
fluxo=matrix(nrow=nfluxos,ncol=2)#[tempo,valor]tempo em data juliana
colnames(fluxo) <- c("Vencimento data juliana", "Valor")

#criacao do vetor de vertices
nvertices=5 #numero de vertices
vertices=matrix(nrow=nvertices,ncol=2) #[tempo,valor]
colnames(vertices) <- c("Data juliana", "Valor")

#vetor teste para fluxo
fluxo[,1]=c(44500,44100,3000,46000,45500)
fluxo[,2]=c(1,2,3,4,5)

#preencher os vertices
vertices[,1]=c(44710,45075,45440,45805,46170) #inserir as datas
vertices[,2]=0

#funcao para alocar os valores dos fluxos nos vertices
#compara a primeira coluna com as datas e aloca os valores da segunda
#coluna com os valores
#necessario converter em data juliana todos periodos
fluxovertice=function(nfluxos,fluxo){
  for(i in 1:nfluxos){
    vertices[which.min(abs(vertices[,1]-fluxo[i,1])),2]<-vertices[which.min(abs(vertices[,1]-fluxo[i,1])),2]+fluxo[i,2]
  }
}


